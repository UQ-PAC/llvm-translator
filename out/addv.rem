; ModuleID = '../in/addv.rem'
source_filename = "lifted_code"
target datalayout = "e-m:e-i8:8:32-i16:16:32-i64:64-i128:128-n32:64-S128"

@X0 = global i64 0
@X1 = global i64 0
@X2 = global i64 0
@X3 = global i64 0
@X4 = global i64 0
@X5 = global i64 0
@X6 = global i64 0
@X7 = global i64 0
@X8 = global i64 0
@X9 = global i64 0
@X10 = global i64 0
@X11 = global i64 0
@X12 = global i64 0
@X13 = global i64 0
@X14 = global i64 0
@X15 = global i64 0
@X16 = global i64 0
@X17 = global i64 0
@X18 = global i64 0
@X19 = global i64 0
@X20 = global i64 0
@X21 = global i64 0
@X22 = global i64 0
@X23 = global i64 0
@X24 = global i64 0
@X25 = global i64 0
@X26 = global i64 0
@X27 = global i64 0
@X28 = global i64 0
@X29 = global i64 0
@X30 = global i64 0
@X31 = global i64 0
@V0 = global i128 0
@V1 = global i128 0
@V2 = global i128 0
@V3 = global i128 0
@V4 = global i128 0
@V5 = global i128 0
@V6 = global i128 0
@V7 = global i128 0
@V8 = global i128 0
@V9 = global i128 0
@V10 = global i128 0
@V11 = global i128 0
@V12 = global i128 0
@V13 = global i128 0
@V14 = global i128 0
@V15 = global i128 0
@V16 = global i128 0
@V17 = global i128 0
@V18 = global i128 0
@V19 = global i128 0
@V20 = global i128 0
@V21 = global i128 0
@V22 = global i128 0
@V23 = global i128 0
@V24 = global i128 0
@V25 = global i128 0
@V26 = global i128 0
@V27 = global i128 0
@V28 = global i128 0
@V29 = global i128 0
@V30 = global i128 0
@V31 = global i128 0
@NF = global i1 false
@ZF = global i1 false
@CF = global i1 false
@VF = global i1 false
@PC = global i64 0

; Function Attrs: alwaysinline
declare ptr @sub_0(ptr noalias, i64, ptr noalias) #0

; Function Attrs: alwaysinline noduplicate nounwind
declare dso_local ptr @__remill_missing_block(ptr noundef nonnull align 1, i64 noundef, ptr noundef) #1

define void @root() {
  %program_counter1 = load i64, ptr @PC, align 8
  %BRANCH_TAKEN = alloca i8, align 4
  %RETURN_PC = alloca i64, align 8
  %MONITOR = alloca i64, align 8
  %MEMORY = alloca ptr, align 8
  store ptr undef, ptr %MEMORY, align 8
  %NEXT_PC = alloca i64, align 8
  store i64 %program_counter1, ptr %NEXT_PC, align 8
  %WZR = alloca i32, align 4
  store i32 0, ptr %WZR, align 4
  %XZR = alloca i64, align 8
  store i64 0, ptr %XZR, align 8
  %IGNORE_WRITE_TO_WZR = alloca i32, align 4
  %IGNORE_WRITE_TO_XZR = alloca i64, align 8
  %SUPPRESS_WRITEBACK = alloca i64, align 8
  store i64 %program_counter1, ptr %NEXT_PC, align 8
  br label %1

1:                                                ; preds = %0
  %2 = load i64, ptr %NEXT_PC, align 8
  store i64 %2, ptr @PC, align 8
  %3 = add i64 %2, 4
  store i64 %3, ptr %NEXT_PC, align 8
  %4 = load ptr, ptr %MEMORY, align 8
  %retval.sroa.0.0.copyload.i.i = load i64, ptr @V1, align 1
  %retval.sroa.2.0..sroa_idx.i.i = getelementptr inbounds i8, ptr @V1, i64 8
  %retval.sroa.2.0.copyload.i.i = load i64, ptr %retval.sroa.2.0..sroa_idx.i.i, align 1
  %vec1.sroa.0.sroa.0.0.extract.trunc.i = trunc i64 %retval.sroa.0.0.copyload.i.i to i32
  %vec1.sroa.0.sroa.4.0.extract.shift.i = lshr i64 %retval.sroa.0.0.copyload.i.i, 32
  %vec1.sroa.0.sroa.4.0.extract.trunc.i = trunc i64 %vec1.sroa.0.sroa.4.0.extract.shift.i to i32
  %retval.sroa.0.0.copyload.i26.i = load i64, ptr @V2, align 1
  %retval.sroa.2.0..sroa_idx.i27.i = getelementptr inbounds i8, ptr @V2, i64 8
  %retval.sroa.2.0.copyload.i29.i = load i64, ptr %retval.sroa.2.0..sroa_idx.i27.i, align 1
  %vec2.sroa.0.sroa.0.0.extract.trunc.i = trunc i64 %retval.sroa.0.0.copyload.i26.i to i32
  %vec2.sroa.0.sroa.4.0.extract.shift.i = lshr i64 %retval.sroa.0.0.copyload.i26.i, 32
  %vec2.sroa.0.sroa.4.0.extract.trunc.i = trunc i64 %vec2.sroa.0.sroa.4.0.extract.shift.i to i32
  %add.i.i = add i32 %vec2.sroa.0.sroa.0.0.extract.trunc.i, %vec1.sroa.0.sroa.0.0.extract.trunc.i
  %add.i.1.i = add i32 %vec2.sroa.0.sroa.4.0.extract.trunc.i, %vec1.sroa.0.sroa.4.0.extract.trunc.i
  %vec1.sroa.5.8.extract.trunc.i = trunc i64 %retval.sroa.2.0.copyload.i.i to i32
  %vec2.sroa.5.8.extract.trunc.i = trunc i64 %retval.sroa.2.0.copyload.i29.i to i32
  %add.i.2.i = add i32 %vec2.sroa.5.8.extract.trunc.i, %vec1.sroa.5.8.extract.trunc.i
  %vec1.sroa.5.12.extract.shift.i = lshr i64 %retval.sroa.2.0.copyload.i.i, 32
  %vec1.sroa.5.12.extract.trunc.i = trunc i64 %vec1.sroa.5.12.extract.shift.i to i32
  %vec2.sroa.5.12.extract.shift.i = lshr i64 %retval.sroa.2.0.copyload.i29.i, 32
  %vec2.sroa.5.12.extract.trunc.i = trunc i64 %vec2.sroa.5.12.extract.shift.i to i32
  %add.i.3.i = add i32 %vec2.sroa.5.12.extract.trunc.i, %vec1.sroa.5.12.extract.trunc.i
  store i32 %add.i.i, ptr @V0, align 1
  %arrayidx2.1.i.i = getelementptr inbounds i8, ptr @V0, i64 4
  store i32 %add.i.1.i, ptr %arrayidx2.1.i.i, align 1
  %arrayidx2.2.i.i = getelementptr inbounds i8, ptr @V0, i64 8
  store i32 %add.i.2.i, ptr %arrayidx2.2.i.i, align 1
  %arrayidx2.3.i.i = getelementptr inbounds i8, ptr @V0, i64 12
  store i32 %add.i.3.i, ptr %arrayidx2.3.i.i, align 1
  store ptr %4, ptr %MEMORY, align 8
  br label %5

5:                                                ; preds = %1
  %6 = load i64, ptr %NEXT_PC, align 8
  store i64 %6, ptr @PC, align 8
  %7 = load ptr, ptr %MEMORY, align 8
  %8 = load i64, ptr @PC, align 8
  ret void
}

attributes #0 = { alwaysinline }
attributes #1 = { alwaysinline noduplicate nounwind "frame-pointer"="all" "no-builtins" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "tune-cpu"="generic" }
